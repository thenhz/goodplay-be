openapi: 3.0.3
info:
  title: GoodPlay Backend API
  description: |
    REST API backend for GoodPlay application with JWT authentication and MongoDB.

    ## Authentication
    - Uses JWT Bearer tokens for authentication
    - Access tokens expire in 1 hour (configurable)
    - Refresh tokens expire in 30 days (configurable)

    ## Response Format
    All responses follow this structure:
    ```json
    {
      "success": boolean,
      "message": "CONSTANT_KEY",
      "data": {} // optional
    }
    ```

    ## Message Constants for UI Localization
    All API responses use constant message keys instead of dynamic text.
    The UI localizes these constants to the user's language.

    ### Common Message Constants:
    - `API_HEALTHY` - API health check success
    - `USER_CREATED_SUCCESS` - User registration success
    - `LOGIN_SUCCESS` - User login success
    - `INVALID_CREDENTIALS` - Invalid login credentials
    - `EMAIL_ALREADY_EXISTS` - Email already registered
    - `VALIDATION_ERROR` - Input validation failed
    - `TOKEN_REFRESHED_SUCCESS` - Token refresh success
    - `LOGOUT_SUCCESS` - User logout success
    - `PROFILE_RETRIEVED_SUCCESS` - Profile retrieved success
    - `PROFILE_UPDATED_SUCCESS` - Profile updated success
    - `UNAUTHORIZED` - Authentication required
    - `INTERNAL_SERVER_ERROR` - Server error occurred

    ### Social Module Message Constants (GOO-7):
    - `FRIEND_REQUEST_SENT_SUCCESS` - Friend request sent successfully
    - `FRIEND_REQUEST_ALREADY_FRIENDS` - Users are already friends
    - `FRIEND_REQUEST_ALREADY_SENT` - Friend request already sent
    - `FRIEND_REQUEST_USER_BLOCKED` - Cannot send request to blocked user
    - `FRIEND_REQUEST_NOT_ALLOWED` - User privacy settings don't allow requests
    - `FRIEND_REQUEST_ACCEPTED_SUCCESS` - Friend request accepted successfully
    - `FRIEND_REQUEST_DECLINED_SUCCESS` - Friend request declined successfully
    - `FRIEND_REQUEST_NOT_FOUND` - Friend request not found
    - `FRIEND_REQUEST_NOT_PENDING` - Friend request is not in pending state
    - `FRIEND_REQUEST_NOT_AUTHORIZED` - User not authorized for this request
    - `FRIEND_REMOVED_SUCCESS` - Friend removed successfully
    - `FRIEND_RELATIONSHIP_NOT_FOUND` - Friend relationship not found
    - `FRIENDS_LIST_SUCCESS` - Friends list retrieved successfully
    - `FRIEND_REQUESTS_SUCCESS` - Friend requests retrieved successfully
    - `USER_BLOCKED_SUCCESS` - User blocked successfully
    - `USER_ALREADY_BLOCKED` - User is already blocked
    - `USER_UNBLOCKED_SUCCESS` - User unblocked successfully
    - `USER_NOT_BLOCKED` - User is not blocked
    - `BLOCKED_USERS_SUCCESS` - Blocked users list retrieved successfully
    - `SEARCH_USERS_SUCCESS` - User search completed successfully
    - `SEARCH_NO_RESULTS` - No users found matching search criteria
    - `SEARCH_QUERY_TOO_SHORT` - Search query must be at least 2 characters
    - `SEARCH_USERS_FAILED` - User search failed
    - `FRIEND_SUGGESTIONS_SUCCESS` - Friend suggestions retrieved successfully
    - `FRIEND_SUGGESTIONS_FAILED` - Failed to retrieve friend suggestions
    - `RELATIONSHIP_STATUS_SUCCESS` - Relationship status retrieved successfully
    - `SOCIAL_STATS_SUCCESS` - Social statistics retrieved successfully
    - `USER_NOT_FOUND` - User not found
    - `TARGET_USER_NOT_FOUND` - Target user not found
    - `CANNOT_INTERACT_WITH_SELF` - Cannot perform this action on yourself
  version: 1.0.0
  contact:
    name: GoodPlay API Support
    
servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://your-app.herokuapp.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication (login, register, logout)
  - name: User Management
    description: User profile and account management
  - name: Health
    description: API health checks
  - name: User Preferences
    description: User preferences and settings management
  - name: Social
    description: Social features, friends, and relationships
  - name: Games
    description: Game engine, plugins, and sessions
  - name: Tournaments
    description: Tournament and competition management
  - name: Achievements
    description: Achievement system and badges
  - name: Leaderboards
    description: Scoring and ranking systems
  - name: Challenges
    description: Social challenges and competitions
  - name: Wallet
    description: Virtual wallet and credit management
  - name: Donations
    description: Donation processing and management
  - name: Impact
    description: Impact tracking and reporting
  - name: ONLUS
    description: ONLUS management and verification
  - name: Admin
    description: Administrative dashboard and management

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running and healthy
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                success: true
                message: "API_HEALTHY"
                status: "healthy"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email, password and optional profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: "user@example.com"
              password: "securepassword123"
              first_name: "John"
              last_name: "Doe"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  value:
                    success: false
                    message: "VALIDATION_ERROR"
                email_exists:
                  value:
                    success: false
                    message: "EMAIL_ALREADY_EXISTS"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "user@example.com"
              password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials or account disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  value:
                    success: false
                    message: "INVALID_CREDENTIALS"
                account_disabled:
                  value:
                    success: false
                    message: "ACCOUNT_DISABLED"
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      security:
        - JWTRefreshAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "TOKEN_REFRESHED_SUCCESS"
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout the authenticated user
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "LOGOUT_SUCCESS"
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Management Endpoints
  /user/profile:
    get:
      tags:
        - User Management
      summary: Get user profile
      description: Retrieve the authenticated user's profile information including extended fields
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PROFILE_RETRIEVED_SUCCESS"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/ExtendedUser'
        '401':
          description: Authentication required or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update the authenticated user's profile information including extended fields
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedUpdateProfileRequest'
            example:
              first_name: "Gaming"
              last_name: "Master"
              preferences:
                notification_enabled: false
                preferred_game_categories: ["action", "adventure"]
                donation_frequency: "monthly"
              social_profile:
                display_name: "GamingMaster"
                privacy_level: "friends"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/ExtendedUser'
        '400':
          description: No fields to update or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/preferences:
    put:
      tags:
        - User Management
      summary: Update user preferences
      description: Update user preferences only
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferencesUpdate'
            example:
              notification_enabled: true
              preferred_game_categories: ["puzzle", "strategy"]
              donation_frequency: "weekly"
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Preferences updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/ExtendedUser'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/social-profile:
    put:
      tags:
        - User Management
      summary: Update social profile
      description: Update user social profile settings
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialProfileUpdate'
            example:
              display_name: "SuperGamer2025"
              privacy_level: "public"
      responses:
        '200':
          description: Social profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Social profile updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/ExtendedUser'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/gaming-stats:
    get:
      tags:
        - User Management
      summary: Get gaming statistics
      description: Retrieve user's gaming statistics and impact score
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Gaming stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Gaming stats retrieved successfully"
                  data:
                    type: object
                    properties:
                      gaming_stats:
                        $ref: '#/components/schemas/GamingStats'
                      impact_score:
                        type: number
                        example: 85
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - User Management
      summary: Update gaming statistics
      description: Update user's gaming statistics
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GamingStatsUpdate'
            example:
              play_time: 45
              game_category: "puzzle"
      responses:
        '200':
          description: Gaming stats updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Gaming stats updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/ExtendedUser'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/wallet:
    get:
      tags:
        - User Management
      summary: Get wallet information
      description: Retrieve user's wallet credits and transaction history
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Wallet information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Wallet information retrieved successfully"
                  data:
                    type: object
                    properties:
                      wallet_credits:
                        $ref: '#/components/schemas/WalletCredits'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/credits:
    post:
      tags:
        - User Management
      summary: Add credits to wallet
      description: Add credits to user's wallet (earned through gaming or other activities)
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCreditsRequest'
            example:
              amount: 25.5
              transaction_type: "earned"
      responses:
        '200':
          description: Credits added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Credits added successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/ExtendedUser'
        '400':
          description: Invalid amount or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/donate:
    post:
      tags:
        - User Management
      summary: Donate credits
      description: Donate user credits to ONLUS organizations
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonateCreditsRequest'
            example:
              amount: 10.0
              onlus_id: "example_onlus_id"
      responses:
        '200':
          description: Donation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Donation successful"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/ExtendedUser'
        '400':
          description: Insufficient credits or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Preferences Endpoints
  /preferences:
    get:
      tags:
        - User Preferences
      summary: Get user preferences
      description: Retrieve all preferences for the authenticated user
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Preferences retrieved successfully"
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - User Preferences
      summary: Update user preferences
      description: Update preferences for the authenticated user
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePreferencesRequest'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Preferences updated successfully"
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /preferences/reset:
    post:
      tags:
        - User Preferences
      summary: Reset preferences to defaults
      description: Reset user preferences to default values
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Preferences reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Preferences reset to defaults"
                  data:
                    $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Social Endpoints - GOO-7 Social Graph Foundation
  /social/friend-request:
    post:
      tags:
        - Social
      summary: Send friend request
      description: Send a friend request to another user
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target_user_id:
                  type: string
                  description: ID of user to send friend request to
                  example: "507f1f77bcf86cd799439012"
              required:
                - target_user_id
      responses:
        '201':
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "FRIEND_REQUEST_SENT_SUCCESS"
                  data:
                    type: object
                    properties:
                      relationship_id:
                        type: string
                        example: "507f1f77bcf86cd799439013"
                      target_user_id:
                        type: string
                        example: "507f1f77bcf86cd799439012"
                      status:
                        type: string
                        example: "pending"
        '400':
          description: Bad request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                already_friends:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_ALREADY_FRIENDS"
                already_sent:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_ALREADY_SENT"
                user_blocked:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_USER_BLOCKED"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/friend-request/{relationship_id}/accept:
    put:
      tags:
        - Social
      summary: Accept friend request
      description: Accept a pending friend request
      security:
        - JWTAuth: []
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
          description: Relationship ID of the friend request
          example: "507f1f77bcf86cd799439013"
      responses:
        '200':
          description: Friend request accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "FRIEND_REQUEST_ACCEPTED_SUCCESS"
                  data:
                    type: object
                    properties:
                      relationship_id:
                        type: string
                        example: "507f1f77bcf86cd799439013"
                      friend_user_id:
                        type: string
                        example: "507f1f77bcf86cd799439012"
                      status:
                        type: string
                        example: "accepted"
        '400':
          description: Request not pending or not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not_found:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_NOT_FOUND"
                not_pending:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_NOT_PENDING"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/friend-request/{relationship_id}/decline:
    put:
      tags:
        - Social
      summary: Decline friend request
      description: Decline a pending friend request
      security:
        - JWTAuth: []
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
          description: Relationship ID of the friend request
          example: "507f1f77bcf86cd799439013"
      responses:
        '200':
          description: Friend request declined successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "FRIEND_REQUEST_DECLINED_SUCCESS"
                  data:
                    type: object
                    properties:
                      relationship_id:
                        type: string
                        example: "507f1f77bcf86cd799439013"
        '400':
          description: Request not found or not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/friends:
    get:
      tags:
        - Social
      summary: Get friends list
      description: Get list of user's friends with pagination
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Maximum number of friends to return
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
          description: Number of friends to skip for pagination
      responses:
        '200':
          description: Friends list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "FRIENDS_LIST_SUCCESS"
                  data:
                    type: object
                    properties:
                      friends:
                        type: array
                        items:
                          $ref: '#/components/schemas/Friend'
                      total:
                        type: integer
                        example: 25
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                            example: 50
                          skip:
                            type: integer
                            example: 0
                          has_more:
                            type: boolean
                            example: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/friends/{friend_user_id}:
    delete:
      tags:
        - Social
      summary: Remove friend
      description: Remove a friend from your friends list
      security:
        - JWTAuth: []
      parameters:
        - name: friend_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the friend to remove
          example: "507f1f77bcf86cd799439012"
      responses:
        '200':
          description: Friend removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "FRIEND_REMOVED_SUCCESS"
                  data:
                    type: object
                    properties:
                      removed_user_id:
                        type: string
                        example: "507f1f77bcf86cd799439012"
        '400':
          description: Friend relationship not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "FRIEND_RELATIONSHIP_NOT_FOUND"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/friend-requests:
    get:
      tags:
        - Social
      summary: Get friend requests
      description: Get received or sent friend requests
      security:
        - JWTAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [received, sent]
            default: received
          description: Type of friend requests to retrieve
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Maximum number of requests to return
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
          description: Number of requests to skip for pagination
      responses:
        '200':
          description: Friend requests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "FRIEND_REQUESTS_SUCCESS"
                  data:
                    type: object
                    properties:
                      requests:
                        type: array
                        items:
                          $ref: '#/components/schemas/FriendRequest'
                      total:
                        type: integer
                        example: 5
                      type:
                        type: string
                        example: "received"
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                            example: 20
                          skip:
                            type: integer
                            example: 0
                          has_more:
                            type: boolean
                            example: false
        '400':
          description: Invalid request type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/users/search:
    post:
      tags:
        - Social
      summary: Search users
      description: Search for users by name or email with privacy controls
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: Search query (minimum 2 characters)
                  example: "john doe"
                limit:
                  type: integer
                  default: 20
                  maximum: 50
                  description: Maximum number of results to return
                skip:
                  type: integer
                  default: 0
                  description: Number of results to skip for pagination
              required:
                - query
      responses:
        '200':
          description: User search completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "SEARCH_USERS_SUCCESS"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchUser'
                      total:
                        type: integer
                        example: 10
                      query:
                        type: string
                        example: "john doe"
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                            example: 20
                          skip:
                            type: integer
                            example: 0
                          has_more:
                            type: boolean
                            example: false
        '400':
          description: Search query too short or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "SEARCH_QUERY_TOO_SHORT"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/users/suggestions:
    get:
      tags:
        - Social
      summary: Get friend suggestions
      description: Get AI-powered friend suggestions based on mutual connections and interests
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 20
          description: Maximum number of suggestions to return
      responses:
        '200':
          description: Friend suggestions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "FRIEND_SUGGESTIONS_SUCCESS"
                  data:
                    type: object
                    properties:
                      suggestions:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserSuggestion'
                      total:
                        type: integer
                        example: 5
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/users/{target_user_id}/block:
    post:
      tags:
        - Social
      summary: Block user
      description: Block another user and remove existing friendship
      security:
        - JWTAuth: []
      parameters:
        - name: target_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of user to block
          example: "507f1f77bcf86cd799439012"
      responses:
        '201':
          description: User blocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "USER_BLOCKED_SUCCESS"
                  data:
                    type: object
                    properties:
                      blocked_user_id:
                        type: string
                        example: "507f1f77bcf86cd799439012"
                      relationship_id:
                        type: string
                        example: "507f1f77bcf86cd799439014"
        '400':
          description: User already blocked or invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "USER_ALREADY_BLOCKED"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/users/{target_user_id}/unblock:
    delete:
      tags:
        - Social
      summary: Unblock user
      description: Remove block relationship with another user
      security:
        - JWTAuth: []
      parameters:
        - name: target_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of user to unblock
          example: "507f1f77bcf86cd799439012"
      responses:
        '200':
          description: User unblocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "USER_UNBLOCKED_SUCCESS"
                  data:
                    type: object
                    properties:
                      unblocked_user_id:
                        type: string
                        example: "507f1f77bcf86cd799439012"
        '400':
          description: User not blocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "USER_NOT_BLOCKED"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/blocked-users:
    get:
      tags:
        - Social
      summary: Get blocked users
      description: Get list of users blocked by current user
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Maximum number of blocked users to return
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
          description: Number of results to skip for pagination
      responses:
        '200':
          description: Blocked users list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "BLOCKED_USERS_SUCCESS"
                  data:
                    type: object
                    properties:
                      blocked_users:
                        type: array
                        items:
                          $ref: '#/components/schemas/BlockedUser'
                      total:
                        type: integer
                        example: 3
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                            example: 50
                          skip:
                            type: integer
                            example: 0
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/relationship-status/{target_user_id}:
    get:
      tags:
        - Social
      summary: Get relationship status
      description: Get current relationship status with another user
      security:
        - JWTAuth: []
      parameters:
        - name: target_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of user to check relationship with
          example: "507f1f77bcf86cd799439012"
      responses:
        '200':
          description: Relationship status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "RELATIONSHIP_STATUS_SUCCESS"
                  data:
                    type: object
                    properties:
                      target_user_id:
                        type: string
                        example: "507f1f77bcf86cd799439012"
                      relationship:
                        $ref: '#/components/schemas/RelationshipStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /social/stats:
    get:
      tags:
        - Social
      summary: Get social statistics
      description: Get current user's social statistics (friends count, pending requests, etc.)
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Social statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "SOCIAL_STATS_SUCCESS"
                  data:
                    $ref: '#/components/schemas/SocialStats'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Games Endpoints
  /games:
    get:
      tags:
        - Games
      summary: Get available games
      description: Get list of available games
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by game category
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Number of results to return
      responses:
        '200':
          description: Games retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Games retrieved successfully"
                  data:
                    type: object
                    properties:
                      games:
                        type: array
                        items:
                          $ref: '#/components/schemas/Game'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /games/{game_id}/sessions:
    post:
      tags:
        - Games
      summary: Start game session
      description: Start a new game session
      security:
        - JWTAuth: []
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
          description: Game ID
      responses:
        '201':
          description: Game session started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Game session started"
                  data:
                    $ref: '#/components/schemas/GameSession'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /games/sessions/{id}/end:
    post:
      tags:
        - Games
      summary: End game session
      description: End an active game session
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                final_score:
                  type: integer
                  example: 1500
                game_state:
                  type: object
                  description: Final game state
      responses:
        '200':
          description: Game session ended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Game session ended"
                  data:
                    type: object
                    properties:
                      session:
                        $ref: '#/components/schemas/GameSession'
                      credits_earned:
                        type: number
                        format: float
                        example: 0.25
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Wallet Endpoints
  /wallet:
    get:
      tags:
        - Wallet
      summary: Get wallet balance
      description: Get current wallet balance and statistics
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Wallet information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Wallet retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallet/transactions:
    get:
      tags:
        - Wallet
      summary: Get transaction history
      description: Get wallet transaction history
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Offset for pagination
        - name: type
          in: query
          schema:
            type: string
            enum: [credit_earned, donation, bonus]
          description: Filter by transaction type
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Transactions retrieved successfully"
                  data:
                    type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          $ref: '#/components/schemas/WalletTransaction'
                      total:
                        type: integer
                        example: 150
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Donations Endpoints
  /donations:
    post:
      tags:
        - Donations
      summary: Process donation
      description: Process a donation to an ONLUS
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationRequest'
      responses:
        '201':
          description: Donation processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Donation processed successfully"
                  data:
                    $ref: '#/components/schemas/Donation'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - Donations
      summary: Get user donations
      description: Get donation history for the authenticated user
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Offset for pagination
      responses:
        '200':
          description: Donations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Donations retrieved successfully"
                  data:
                    type: object
                    properties:
                      donations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Donation'
                      total:
                        type: integer
                        example: 25
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ONLUS Endpoints
  /onlus:
    get:
      tags:
        - ONLUS
      summary: Search ONLUS organizations
      description: Search and filter verified ONLUS organizations
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category
        - name: search
          in: query
          schema:
            type: string
          description: Search in name and description
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Number of results to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Offset for pagination
      responses:
        '200':
          description: ONLUS organizations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "ONLUS organizations retrieved successfully"
                  data:
                    type: object
                    properties:
                      organizations:
                        type: array
                        items:
                          $ref: '#/components/schemas/ONLUS'
                      total:
                        type: integer
                        example: 75
        '500':
          $ref: '#/components/responses/InternalServerError'

  /onlus/{id}:
    get:
      tags:
        - ONLUS
      summary: Get ONLUS details
      description: Get detailed information about a specific ONLUS
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ONLUS ID
      responses:
        '200':
          description: ONLUS details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "ONLUS details retrieved successfully"
                  data:
                    $ref: '#/components/schemas/ONLUSDetail'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Impact Tracking Endpoints
  /impact/user:
    get:
      tags:
        - Impact
      summary: Get user impact summary
      description: Get personal impact summary for authenticated user
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Impact summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Impact summary retrieved successfully"
                  data:
                    $ref: '#/components/schemas/UserImpactSummary'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # User Preferences Endpoints
  /preferences:
    get:
      tags:
        - User Preferences
      summary: Get user preferences
      description: Get all user preferences with automatic defaults if not exist
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PREFERENCES_RETRIEVED_SUCCESS"
                  data:
                    type: object
                    properties:
                      preferences:
                        $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - User Preferences
      summary: Update user preferences
      description: Update user preferences with validation
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferencesUpdateRequest'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PREFERENCES_UPDATED_SUCCESS"
                  data:
                    type: object
                    properties:
                      preferences:
                        $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  value:
                    success: false
                    message: "VALIDATION_ERROR"
                gaming_difficulty_invalid:
                  value:
                    success: false
                    message: "GAMING_DIFFICULTY_INVALID"
                notification_frequency_invalid:
                  value:
                    success: false
                    message: "NOTIFICATION_FREQUENCY_INVALID"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /preferences/{category}:
    get:
      tags:
        - User Preferences
      summary: Get preferences for specific category
      description: Get preferences for a specific category (gaming, notifications, privacy, donations)
      security:
        - JWTAuth: []
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            enum: [gaming, notifications, privacy, donations]
          description: Preference category
      responses:
        '200':
          description: Category preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PREFERENCES_CATEGORY_RETRIEVED_SUCCESS"
                  data:
                    type: object
                    properties:
                      category:
                        type: string
                        example: "gaming"
                      preferences:
                        type: object
        '400':
          description: Invalid category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "PREFERENCES_CATEGORY_INVALID"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - User Preferences
      summary: Update specific category preferences
      description: Update preferences for a specific category
      security:
        - JWTAuth: []
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            enum: [gaming, notifications, privacy, donations]
          description: Preference category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Category-specific preferences
            examples:
              gaming:
                value:
                  difficulty_level: "hard"
                  tutorial_enabled: false
                  preferred_categories: ["puzzle", "strategy"]
              notifications:
                value:
                  push_enabled: true
                  frequency: "weekly"
                  achievement_alerts: false
      responses:
        '200':
          description: Category preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PREFERENCES_CATEGORY_UPDATED_SUCCESS"
                  data:
                    type: object
                    properties:
                      preferences:
                        $ref: '#/components/schemas/UserPreferences'
                      updated_category:
                        type: string
                        example: "gaming"
        '400':
          description: Validation error or invalid category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /preferences/reset:
    post:
      tags:
        - User Preferences
      summary: Reset preferences to defaults
      description: Reset all user preferences to default values
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Preferences reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PREFERENCES_RESET_SUCCESS"
                  data:
                    type: object
                    properties:
                      preferences:
                        $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /preferences/defaults:
    get:
      tags:
        - User Preferences
      summary: Get default preferences template
      description: Get default preferences template for new users (public endpoint)
      responses:
        '200':
          description: Default preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "DEFAULT_PREFERENCES_RETRIEVED_SUCCESS"
                  data:
                    type: object
                    properties:
                      default_preferences:
                        $ref: '#/components/schemas/DefaultPreferences'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Access Token
    JWTRefreshAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Refresh Token

  responses:
    SuccessResponse:
      description: Operation successful
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Operation completed successfully"

    BadRequestError:
      description: Bad request - validation error or invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnauthorizedError:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User unique identifier
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        first_name:
          type: string
          description: User first name
          nullable: true
          example: "John"
        last_name:
          type: string
          description: User last name
          nullable: true
          example: "Doe"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        role:
          type: string
          description: User role
          example: "user"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          description: User password (minimum 6 characters)
          example: "securepassword123"
        first_name:
          type: string
          description: User first name (optional)
          example: "John"
        last_name:
          type: string
          description: User last name (optional)
          example: "Doe"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          description: User password
          example: "securepassword123"

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          description: User first name (optional)
          example: "John"
        last_name:
          type: string
          description: User last name (optional)
          example: "Smith"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Registration completed successfully"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              type: object
              properties:
                access_token:
                  type: string
                  description: JWT access token
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                refresh_token:
                  type: string
                  description: JWT refresh token
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                token_type:
                  type: string
                  example: "Bearer"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "Invalid credentials"
        data:
          type: object
          description: Optional additional error data
          nullable: true

    HealthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "API is running"
        status:
          type: string
          example: "healthy"

    # New schemas for extended functionality
    UserPreferences:
      type: object
      properties:
        gaming:
          type: object
          properties:
            preferred_categories:
              type: array
              items:
                type: string
              example: ["puzzle", "arcade"]
            difficulty_level:
              type: string
              enum: [easy, medium, hard]
              example: "medium"
            tutorial_enabled:
              type: boolean
              example: true
        notifications:
          type: object
          properties:
            push_enabled:
              type: boolean
              example: true
            email_enabled:
              type: boolean
              example: false
            frequency:
              type: string
              enum: [never, daily, weekly]
              example: "weekly"
        privacy:
          type: object
          properties:
            profile_visibility:
              type: string
              enum: [public, friends, private]
              example: "friends"
            stats_sharing:
              type: boolean
              example: true
            friends_discovery:
              type: boolean
              example: true
        donations:
          type: object
          properties:
            auto_donate_enabled:
              type: boolean
              example: false
            preferred_causes:
              type: array
              items:
                type: string
              example: ["education", "environment"]
            notification_threshold:
              type: number
              format: float
              example: 5.0

    UpdatePreferencesRequest:
      type: object
      properties:
        gaming:
          type: object
          properties:
            preferred_categories:
              type: array
              items:
                type: string
            difficulty_level:
              type: string
              enum: [easy, medium, hard]
            tutorial_enabled:
              type: boolean
        notifications:
          type: object
          properties:
            push_enabled:
              type: boolean
            email_enabled:
              type: boolean
            frequency:
              type: string
              enum: [never, daily, weekly]
        privacy:
          type: object
          properties:
            profile_visibility:
              type: string
              enum: [public, friends, private]
            stats_sharing:
              type: boolean
            friends_discovery:
              type: boolean

    Friend:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439012"
        display_name:
          type: string
          example: "JohnDoe123"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        impact_score:
          type: integer
          example: 1250
        gaming_stats:
          type: object
          properties:
            total_play_time:
              type: integer
              example: 3600
            favorite_category:
              type: string
              example: "puzzle"
        friendship_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        is_active:
          type: boolean
          example: true

    FriendRequest:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439013"
        user_id:
          type: string
          example: "507f1f77bcf86cd799439012"
        display_name:
          type: string
          example: "JaneDoe456"
        first_name:
          type: string
          example: "Jane"
        last_name:
          type: string
          example: "Doe"
        impact_score:
          type: integer
          example: 950
        created_at:
          type: string
          format: date-time
          example: "2024-01-20T08:15:00Z"
        status:
          type: string
          enum: [pending, accepted, declined]
          example: "pending"
        type:
          type: string
          enum: [received, sent]
          example: "received"

    SearchUser:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439012"
        display_name:
          type: string
          example: "AliceWonder789"
        first_name:
          type: string
          example: "Alice"
        last_name:
          type: string
          example: "Wonder"
        email:
          type: string
          example: "alice.wonder@example.com"
        impact_score:
          type: integer
          example: 2100
        gaming_stats:
          type: object
          properties:
            total_play_time:
              type: integer
              example: 7200
            favorite_category:
              type: string
              example: "strategy"
        friends_count:
          type: integer
          example: 15
        relationship:
          $ref: '#/components/schemas/RelationshipStatus'
        privacy_level:
          type: string
          enum: [public, friends, private]
          example: "public"

    UserSuggestion:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439012"
        display_name:
          type: string
          example: "BobBuilder321"
        first_name:
          type: string
          example: "Bob"
        last_name:
          type: string
          example: "Builder"
        impact_score:
          type: integer
          example: 1800
        gaming_stats:
          type: object
          properties:
            total_play_time:
              type: integer
              example: 5400
            favorite_category:
              type: string
              example: "puzzle"
        friends_count:
          type: integer
          example: 22
        relationship:
          $ref: '#/components/schemas/RelationshipStatus'
        privacy_level:
          type: string
          enum: [public, friends, private]
          example: "public"

    BlockedUser:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439015"
        display_name:
          type: string
          example: "SpamUser123"
        first_name:
          type: string
          example: "Spam"
        last_name:
          type: string
          example: "User"
        blocked_at:
          type: string
          format: date-time
          example: "2024-01-18T14:20:00Z"

    RelationshipStatus:
      type: object
      properties:
        type:
          type: string
          enum: [friend, following, blocked, null]
          example: "friend"
          nullable: true
        status:
          type: string
          enum: [pending, accepted, declined, null]
          example: "accepted"
          nullable: true
        is_friend:
          type: boolean
          example: true
        is_pending:
          type: boolean
          example: false
        is_blocked:
          type: boolean
          example: false
        initiated_by_me:
          type: boolean
          example: false

    SocialStats:
      type: object
      properties:
        friends_count:
          type: integer
          example: 45
        pending_requests_count:
          type: integer
          example: 3
        sent_requests_count:
          type: integer
          example: 1
        blocked_users_count:
          type: integer
          example: 2

    Game:
      type: object
      properties:
        game_id:
          type: string
          example: "puzzle-master-v1"
        name:
          type: string
          example: "Puzzle Master"
        description:
          type: string
          example: "Classic puzzle game with multiple difficulty levels"
        category:
          type: string
          example: "puzzle"
        version:
          type: string
          example: "1.2.3"
        rating:
          type: number
          format: float
          example: 4.5
        install_count:
          type: integer
          example: 25000
        is_active:
          type: boolean
          example: true

    GameSession:
      type: object
      properties:
        session_id:
          type: string
          example: "sess_123abc456def"
        game_id:
          type: string
          example: "puzzle-master-v1"
        user_id:
          type: string
          example: "507f1f77bcf86cd799439011"
        status:
          type: string
          enum: [active, paused, completed, abandoned]
          example: "active"
        start_time:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        play_duration:
          type: integer
          description: Duration in milliseconds
          example: 1800000
        current_score:
          type: integer
          example: 1200

    Wallet:
      type: object
      properties:
        current_balance:
          type: number
          format: float
          description: Current balance in euros
          example: 12.50
        total_earned:
          type: number
          format: float
          description: Total credits earned all time
          example: 45.75
        total_donated:
          type: number
          format: float
          description: Total amount donated
          example: 33.25
        pending_credits:
          type: number
          format: float
          description: Credits being processed
          example: 2.50
        last_transaction:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    WalletTransaction:
      type: object
      properties:
        transaction_id:
          type: string
          example: "txn_123abc456def"
        transaction_type:
          type: string
          enum: [credit_earned, donation, bonus, refund]
          example: "credit_earned"
        amount:
          type: number
          format: float
          description: Amount in euros
          example: 0.25
        description:
          type: string
          example: "Credits earned from 15-minute gaming session"
        game_session_id:
          type: string
          nullable: true
          example: "sess_123abc456def"
        status:
          type: string
          enum: [pending, completed, failed]
          example: "completed"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    DonationRequest:
      type: object
      required:
        - onlus_id
        - amount
      properties:
        onlus_id:
          type: string
          example: "507f1f77bcf86cd799439013"
        amount:
          type: number
          format: float
          minimum: 0.01
          description: Donation amount in euros
          example: 5.00
        donation_type:
          type: string
          enum: [instant, scheduled, challenge]
          default: instant
          example: "instant"
        message:
          type: string
          description: Optional message to ONLUS
          example: "Keep up the great work!"

    Donation:
      type: object
      properties:
        donation_id:
          type: string
          example: "don_123abc456def"
        user_id:
          type: string
          example: "507f1f77bcf86cd799439011"
        onlus_id:
          type: string
          example: "507f1f77bcf86cd799439013"
        onlus_name:
          type: string
          example: "Education for All Foundation"
        amount:
          type: number
          format: float
          example: 5.00
        processing_fee:
          type: number
          format: float
          example: 0.15
        net_donation:
          type: number
          format: float
          example: 4.85
        status:
          type: string
          enum: [pending, processing, completed, failed]
          example: "completed"
        donation_type:
          type: string
          example: "instant"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        processed_at:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-15T10:31:00Z"

    ONLUS:
      type: object
      properties:
        onlus_id:
          type: string
          example: "507f1f77bcf86cd799439013"
        display_name:
          type: string
          example: "Education for All Foundation"
        description:
          type: string
          example: "Providing quality education to underserved communities worldwide"
        category:
          type: string
          enum: [health, education, environment, social, humanitarian, arts, animal_welfare]
          example: "education"
        logo_url:
          type: string
          nullable: true
          example: "https://cdn.goodplay.com/onlus/logos/edu-foundation.png"
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.7
        total_received:
          type: number
          format: float
          description: Total donations received through platform
          example: 12450.75
        donor_count:
          type: integer
          description: Number of unique donors
          example: 342
        verification_status:
          type: string
          enum: [verified, pending, rejected]
          example: "verified"

    ONLUSDetail:
      allOf:
        - $ref: '#/components/schemas/ONLUS'
        - type: object
          properties:
            legal_name:
              type: string
              example: "Education for All Foundation Inc."
            mission_statement:
              type: string
              example: "Our mission is to provide quality education access to underserved communities through innovative programs and sustainable partnerships."
            website:
              type: string
              nullable: true
              example: "https://educationforall.org"
            contact_info:
              type: object
              properties:
                email:
                  type: string
                  example: "contact@educationforall.org"
                phone:
                  type: string
                  example: "+1-555-0123"
            active_projects:
              type: array
              items:
                type: object
                properties:
                  project_id:
                    type: string
                    example: "proj_123abc"
                  title:
                    type: string
                    example: "Digital Learning Initiative"
                  target_amount:
                    type: number
                    format: float
                    example: 25000.00
                  current_amount:
                    type: number
                    format: float
                    example: 18750.50
                  progress_percentage:
                    type: number
                    format: float
                    example: 75.0

    UserImpactSummary:
      type: object
      properties:
        impact_score:
          type: integer
          description: Overall impact score
          example: 1250
        total_donated:
          type: number
          format: float
          description: Total amount donated in euros
          example: 125.50
        donations_count:
          type: integer
          description: Total number of donations made
          example: 25
        onlus_supported:
          type: integer
          description: Number of different ONLUS supported
          example: 8
        lives_impacted:
          type: integer
          description: Estimated number of lives impacted
          example: 42
        impact_categories:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
                example: "education"
              amount_donated:
                type: number
                format: float
                example: 75.50
              percentage:
                type: number
                format: float
                example: 60.0
        recent_impact:
          type: array
          items:
            type: object
            properties:
              onlus_name:
                type: string
                example: "Education for All Foundation"
              donation_amount:
                type: number
                format: float
                example: 10.00
              impact_description:
                type: string
                example: "Provided school supplies for 2 students"
              date:
                type: string
                format: date-time
                example: "2024-01-15T10:30:00Z"

    # Extended User Schemas for GOO-5
    ExtendedUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            gaming_stats:
              $ref: '#/components/schemas/GamingStats'
            impact_score:
              type: number
              description: User's social impact score
              example: 85
            preferences:
              $ref: '#/components/schemas/UserPreferences'
            social_profile:
              $ref: '#/components/schemas/SocialProfile'
            wallet_credits:
              $ref: '#/components/schemas/WalletCredits'

    GamingStats:
      type: object
      properties:
        total_play_time:
          type: number
          description: Total minutes played across all games
          example: 1250
        games_played:
          type: number
          description: Number of different games played
          example: 5
        favorite_category:
          type: string
          description: Most played game category
          nullable: true
          example: "puzzle"
        last_activity:
          type: string
          format: date-time
          description: Last gaming activity timestamp
          nullable: true
          example: "2024-01-15T10:30:00Z"

    UserPreferences:
      type: object
      properties:
        notification_enabled:
          type: boolean
          description: Enable push notifications
          example: true
        preferred_game_categories:
          type: array
          items:
            type: string
          description: List of preferred game categories
          example: ["puzzle", "strategy"]
        donation_frequency:
          type: string
          enum: ["daily", "weekly", "monthly", "never"]
          description: Preferred donation frequency
          example: "weekly"

    SocialProfile:
      type: object
      properties:
        display_name:
          type: string
          description: Public display name
          example: "SuperGamer2025"
        privacy_level:
          type: string
          enum: ["public", "friends", "private"]
          description: Profile privacy level
          example: "public"
        friends_count:
          type: number
          description: Number of friends
          example: 15

    WalletCredits:
      type: object
      properties:
        current_balance:
          type: number
          format: float
          description: Current available credits
          example: 45.75
        total_earned:
          type: number
          format: float
          description: Total credits earned through gaming
          example: 120.50
        total_donated:
          type: number
          format: float
          description: Total credits donated to ONLUS
          example: 74.75

    # Request Schemas for User Management
    ExtendedUpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          description: User first name
          example: "Gaming"
        last_name:
          type: string
          description: User last name
          example: "Master"
        preferences:
          $ref: '#/components/schemas/PreferencesUpdate'
        social_profile:
          $ref: '#/components/schemas/SocialProfileUpdate'

    PreferencesUpdate:
      type: object
      properties:
        notification_enabled:
          type: boolean
          description: Enable push notifications
          example: true
        preferred_game_categories:
          type: array
          items:
            type: string
          description: List of preferred game categories
          example: ["puzzle", "strategy"]
        donation_frequency:
          type: string
          enum: ["daily", "weekly", "monthly", "never"]
          description: Preferred donation frequency
          example: "weekly"

    SocialProfileUpdate:
      type: object
      properties:
        display_name:
          type: string
          minLength: 2
          maxLength: 50
          description: Public display name
          example: "SuperGamer2025"
        privacy_level:
          type: string
          enum: ["public", "friends", "private"]
          description: Profile privacy level
          example: "public"

    GamingStatsUpdate:
      type: object
      properties:
        play_time:
          type: number
          minimum: 0
          description: Minutes played in this session
          example: 45
        game_category:
          type: string
          description: Category of the game played
          example: "puzzle"

    AddCreditsRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
          description: Amount of credits to add
          example: 25.5
        transaction_type:
          type: string
          enum: ["earned", "bonus", "refund"]
          description: Type of credit transaction
          example: "earned"

    DonateCreditsRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
          description: Amount of credits to donate
          example: 10.0
        onlus_id:
          type: string
          description: ID of the ONLUS organization to donate to
          example: "example_onlus_id"

    # User Preferences Schemas (embedded in User document)
    UserPreferences:
      type: object
      description: User preferences embedded in User document
      properties:
        gaming:
          $ref: '#/components/schemas/GamingPreferences'
        notifications:
          $ref: '#/components/schemas/NotificationPreferences'
        privacy:
          $ref: '#/components/schemas/PrivacyPreferences'
        donations:
          $ref: '#/components/schemas/DonationPreferences'

    GamingPreferences:
      type: object
      properties:
        preferred_categories:
          type: array
          items:
            type: string
          description: Preferred game categories
          example: ["puzzle", "strategy", "action"]
        difficulty_level:
          type: string
          enum: ["easy", "medium", "hard"]
          description: Preferred difficulty level
          example: "medium"
        tutorial_enabled:
          type: boolean
          description: Show tutorials for new games
          example: true
        auto_save:
          type: boolean
          description: Auto-save game progress
          example: true
        sound_enabled:
          type: boolean
          description: Enable game sounds
          example: true
        music_enabled:
          type: boolean
          description: Enable background music
          example: true
        vibration_enabled:
          type: boolean
          description: Enable device vibration
          example: true

    NotificationPreferences:
      type: object
      properties:
        push_enabled:
          type: boolean
          description: Enable push notifications
          example: true
        email_enabled:
          type: boolean
          description: Enable email notifications
          example: true
        frequency:
          type: string
          enum: ["none", "daily", "weekly", "monthly"]
          description: Notification frequency
          example: "daily"
        achievement_alerts:
          type: boolean
          description: Alert on achievement unlocks
          example: true
        donation_confirmations:
          type: boolean
          description: Confirm successful donations
          example: true
        friend_activity:
          type: boolean
          description: Notify about friend activity
          example: true
        tournament_reminders:
          type: boolean
          description: Remind about tournaments
          example: true
        maintenance_alerts:
          type: boolean
          description: Notify about maintenance
          example: true

    PrivacyPreferences:
      type: object
      properties:
        profile_visibility:
          type: string
          enum: ["public", "friends", "private"]
          description: Profile visibility level
          example: "public"
        stats_sharing:
          type: boolean
          description: Share gaming statistics
          example: true
        friends_discovery:
          type: boolean
          description: Allow discovery by friends
          example: true
        leaderboard_participation:
          type: boolean
          description: Participate in leaderboards
          example: true
        activity_visibility:
          type: string
          enum: ["public", "friends", "private"]
          description: Activity visibility level
          example: "friends"
        contact_permissions:
          type: string
          enum: ["everyone", "friends", "none"]
          description: Who can contact you
          example: "friends"

    DonationPreferences:
      type: object
      properties:
        auto_donate_enabled:
          type: boolean
          description: Enable automatic donations
          example: false
        auto_donate_percentage:
          type: number
          minimum: 0
          maximum: 100
          description: Percentage of earned credits to auto-donate
          example: 10
        preferred_causes:
          type: array
          items:
            type: string
          description: Preferred donation causes
          example: ["education", "health", "environment"]
        notification_threshold:
          type: number
          minimum: 0
          description: Notify when credits reach this amount
          example: 50
        monthly_goal:
          type: number
          minimum: 0
          nullable: true
          description: Optional monthly donation goal
          example: 100
        impact_sharing:
          type: boolean
          description: Share impact statistics
          example: true

    DefaultPreferences:
      type: object
      properties:
        gaming:
          $ref: '#/components/schemas/GamingPreferences'
        notifications:
          $ref: '#/components/schemas/NotificationPreferences'
        privacy:
          $ref: '#/components/schemas/PrivacyPreferences'
        donations:
          $ref: '#/components/schemas/DonationPreferences'

    PreferencesUpdateRequest:
      type: object
      properties:
        gaming:
          $ref: '#/components/schemas/GamingPreferences'
        notifications:
          $ref: '#/components/schemas/NotificationPreferences'
        privacy:
          $ref: '#/components/schemas/PrivacyPreferences'
        donations:
          $ref: '#/components/schemas/DonationPreferences'
      description: Update request can contain any combination of preference categories