openapi: 3.0.3
info:
  title: GoodPlay Backend API
  description: |
    REST API backend for GoodPlay application with JWT authentication and MongoDB.
    
    ## Authentication
    - Uses JWT Bearer tokens for authentication
    - Access tokens expire in 1 hour (configurable)
    - Refresh tokens expire in 30 days (configurable)
    
    ## Response Format
    All responses follow this structure:
    ```json
    {
      "success": boolean,
      "message": "string",
      "data": {} // optional
    }
    ```
  version: 1.0.0
  contact:
    name: GoodPlay API Support
    
servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://your-app.herokuapp.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and profile management
  - name: Health
    description: API health checks

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running and healthy
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                success: true
                message: "API is running"
                status: "healthy"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email, password and optional profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: "user@example.com"
              password: "securepassword123"
              first_name: "John"
              last_name: "Doe"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  value:
                    success: false
                    message: "Invalid email format"
                email_exists:
                  value:
                    success: false
                    message: "Email already registered"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "user@example.com"
              password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials or account disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  value:
                    success: false
                    message: "Invalid credentials"
                account_disabled:
                  value:
                    success: false
                    message: "Account disabled"
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using a valid refresh token
      security:
        - JWTRefreshAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Token refreshed successfully"
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User profile retrieved"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Authentication required or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
            example:
              first_name: "John"
              last_name: "Smith"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: No fields to update or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout the authenticated user
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Access Token
    JWTRefreshAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Refresh Token

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User unique identifier
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        first_name:
          type: string
          description: User first name
          nullable: true
          example: "John"
        last_name:
          type: string
          description: User last name
          nullable: true
          example: "Doe"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        role:
          type: string
          description: User role
          example: "user"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          description: User password (minimum 6 characters)
          example: "securepassword123"
        first_name:
          type: string
          description: User first name (optional)
          example: "John"
        last_name:
          type: string
          description: User last name (optional)
          example: "Doe"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          description: User password
          example: "securepassword123"

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          description: User first name (optional)
          example: "John"
        last_name:
          type: string
          description: User last name (optional)
          example: "Smith"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Registration completed successfully"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              type: object
              properties:
                access_token:
                  type: string
                  description: JWT access token
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                refresh_token:
                  type: string
                  description: JWT refresh token
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                token_type:
                  type: string
                  example: "Bearer"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "Invalid credentials"
        data:
          type: object
          description: Optional additional error data
          nullable: true

    HealthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "API is running"
        status:
          type: string
          example: "healthy"