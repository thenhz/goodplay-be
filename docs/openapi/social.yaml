# Social Features & Relationships API (GOO-7)
# This module contains social graph and relationship functionality

openapi: 3.1.0

info:
  title: GoodPlay Social API
  version: 1.0.0
  description: Social relationships, friend management, and user discovery

# API Paths
paths:
  # Friend Request Management
  /api/social/friend-request:
    post:
      tags:
        - Social
      summary: Send friend request
      description: Send a friend request to another user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - target_user_id
              properties:
                target_user_id:
                  type: string
                  description: ID of user to send friend request to
            example:
              target_user_id: "64f8b2c1234567890abcdef2"
      responses:
        '201':
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "FRIEND_REQUEST_SENT_SUCCESS"
        '400':
          description: Friend request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_data:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_DATA_REQUIRED"
                missing_target:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_TARGET_USER_REQUIRED"
                already_friends:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_ALREADY_FRIENDS"
                already_sent:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_ALREADY_SENT"
                user_blocked:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_USER_BLOCKED"

  /api/social/friend-request/{relationship_id}/accept:
    put:
      tags:
        - Social
      summary: Accept friend request
      description: Accept a pending friend request
      security:
        - bearerAuth: []
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
          description: Relationship ID from friend request
      responses:
        '200':
          description: Friend request accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                message: "FRIEND_REQUEST_ACCEPTED_SUCCESS"
        '400':
          description: Accept failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_id:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_ID_REQUIRED"

  /api/social/friend-request/{relationship_id}/decline:
    put:
      tags:
        - Social
      summary: Decline friend request
      description: Decline a pending friend request
      security:
        - bearerAuth: []
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
          description: Relationship ID from friend request
      responses:
        '200':
          description: Friend request declined successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Decline failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_id:
                  value:
                    success: false
                    message: "FRIEND_REQUEST_ID_REQUIRED"

  # Friends Management
  /api/social/friends:
    get:
      tags:
        - Social
      summary: Get friends list
      description: Retrieve current user's friends list
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Friends list retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FriendsList'

  /api/social/friends/{friend_user_id}:
    delete:
      tags:
        - Social
      summary: Remove friend
      description: Remove a user from friends list
      security:
        - bearerAuth: []
      parameters:
        - name: friend_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of friend to remove
      responses:
        '200':
          description: Friend removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_id:
                  value:
                    success: false
                    message: "FRIEND_USER_ID_REQUIRED"

  /api/social/friend-requests:
    get:
      tags:
        - Social
      summary: Get friend requests
      description: Retrieve pending friend requests
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [received, sent]
            default: received
          description: Type of requests to retrieve (received or sent)
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Friend requests retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FriendRequestsList'
        '400':
          description: Invalid request type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                invalid_type:
                  value:
                    success: false
                    message: "INVALID_REQUEST_TYPE"

  # User Blocking
  /api/social/users/{target_user_id}/block:
    post:
      tags:
        - Social
      summary: Block user
      description: Block a user from interacting
      security:
        - bearerAuth: []
      parameters:
        - name: target_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of user to block
      responses:
        '201':
          description: User blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Block failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_id:
                  value:
                    success: false
                    message: "TARGET_USER_ID_REQUIRED"

  /api/social/users/{target_user_id}/unblock:
    delete:
      tags:
        - Social
      summary: Unblock user
      description: Unblock a previously blocked user
      security:
        - bearerAuth: []
      parameters:
        - name: target_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of user to unblock
      responses:
        '200':
          description: User unblocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Unblock failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_id:
                  value:
                    success: false
                    message: "TARGET_USER_ID_REQUIRED"

  /api/social/blocked-users:
    get:
      tags:
        - Social
      summary: Get blocked users
      description: Retrieve list of blocked users
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Blocked users list retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BlockedUsersList'

  # User Discovery
  /api/social/users/search:
    post:
      tags:
        - Social
      summary: Search users
      description: Search for users by name or email
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  minLength: 2
                  description: Search query (minimum 2 characters)
                limit:
                  type: integer
                  default: 20
                  minimum: 1
                  maximum: 50
                skip:
                  type: integer
                  default: 0
                  minimum: 0
            example:
              query: "john"
              limit: 20
              skip: 0
      responses:
        '200':
          description: User search completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserSearchResults'
        '400':
          description: Search failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_data:
                  value:
                    success: false
                    message: "SEARCH_DATA_REQUIRED"
                missing_query:
                  value:
                    success: false
                    message: "SEARCH_QUERY_REQUIRED"

  /api/social/users/suggestions:
    get:
      tags:
        - Social
      summary: Get friend suggestions
      description: Get suggested users to add as friends
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 20
      responses:
        '200':
          description: Friend suggestions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FriendSuggestions'

  # Relationship Status
  /api/social/relationship-status/{target_user_id}:
    get:
      tags:
        - Social
      summary: Get relationship status
      description: Get relationship status with another user
      security:
        - bearerAuth: []
      parameters:
        - name: target_user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of user to check relationship with
      responses:
        '200':
          description: Relationship status retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          target_user_id:
                            type: string
                          relationship:
                            $ref: '#/components/schemas/RelationshipStatus'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                missing_id:
                  value:
                    success: false
                    message: "TARGET_USER_ID_REQUIRED"

  # Social Statistics
  /api/social/stats:
    get:
      tags:
        - Social
      summary: Get social statistics
      description: Get current user's social statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Social statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SocialStatistics'

# Components
components:
  schemas:
    # Core response structure
    ApiResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
          description: Constant message key for UI localization
          enum:
            # Friend operations - Success
            - FRIEND_REQUEST_SENT_SUCCESS
            - FRIEND_REQUEST_ACCEPTED_SUCCESS
            - FRIEND_REQUEST_DECLINED_SUCCESS
            - FRIEND_REMOVED_SUCCESS
            - FRIENDS_LIST_SUCCESS
            - FRIEND_REQUESTS_SUCCESS
            # Friend operations - Errors
            - FRIEND_REQUEST_DATA_REQUIRED
            - FRIEND_REQUEST_TARGET_USER_REQUIRED
            - FRIEND_REQUEST_ID_REQUIRED
            - FRIEND_USER_ID_REQUIRED
            - FRIEND_REQUEST_SEND_FAILED
            - FRIEND_REQUEST_ALREADY_FRIENDS
            - FRIEND_REQUEST_ALREADY_SENT
            - FRIEND_REQUEST_USER_BLOCKED
            - FRIEND_REQUEST_NOT_ALLOWED
            - FRIEND_REQUEST_ACCEPT_FAILED
            - FRIEND_REQUEST_DECLINE_FAILED
            - FRIEND_REQUEST_NOT_FOUND
            - FRIEND_REQUEST_NOT_PENDING
            - FRIEND_RELATIONSHIP_NOT_FOUND
            - FRIEND_REMOVE_FAILED
            - FRIENDS_LIST_FAILED
            - FRIEND_REQUESTS_FAILED
            - INVALID_REQUEST_TYPE
            # Blocking operations - Success
            - USER_BLOCKED_SUCCESS
            - USER_UNBLOCKED_SUCCESS
            - BLOCKED_USERS_SUCCESS
            # Blocking operations - Errors
            - TARGET_USER_ID_REQUIRED
            - USER_ALREADY_BLOCKED
            - USER_NOT_BLOCKED
            - USER_BLOCK_FAILED
            - USER_UNBLOCK_FAILED
            - BLOCKED_USERS_FAILED
            # Search & discovery - Success
            - SEARCH_USERS_SUCCESS
            - FRIEND_SUGGESTIONS_SUCCESS
            # Search & discovery - Errors
            - SEARCH_DATA_REQUIRED
            - SEARCH_QUERY_REQUIRED
            - SEARCH_USERS_FAILED
            - SEARCH_QUERY_TOO_SHORT
            - FRIEND_SUGGESTIONS_FAILED
            # Social stats - Success
            - SOCIAL_STATS_SUCCESS
            - RELATIONSHIP_STATUS_SUCCESS
            # Social stats - Errors
            - SOCIAL_STATS_FAILED
            - RELATIONSHIP_STATUS_FAILED
            # General validation
            - TARGET_USER_NOT_FOUND
            - CANNOT_INTERACT_WITH_SELF
            - USER_NOT_FOUND
        data:
          anyOf:
            - type: object
            - type: 'null'

    # Friends Management
    FriendsList:
      type: object
      properties:
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Friend'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    Friend:
      type: object
      properties:
        user_id:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
        status:
          type: string
          enum: [online, offline, away]
        friendship_date:
          type: string
          format: date-time
        mutual_friends_count:
          type: integer

    UserProfile:
      type: object
      properties:
        user_id:
          type: string
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          anyOf:
            - type: string
            - type: 'null'
        level:
          type: integer
        impact_score:
          type: number

    FriendRequestsList:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/FriendRequest'
        total_count:
          type: integer

    FriendRequest:
      type: object
      properties:
        request_id:
          type: string
        from_user:
          $ref: '#/components/schemas/UserProfile'
        to_user:
          $ref: '#/components/schemas/UserProfile'
        status:
          type: string
          enum: [pending, accepted, declined]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # User Blocking
    BlockedUsersList:
      type: object
      properties:
        blocked_users:
          type: array
          items:
            $ref: '#/components/schemas/BlockedUser'
        total_count:
          type: integer

    BlockedUser:
      type: object
      properties:
        user_id:
          type: string
        display_name:
          type: string
        blocked_at:
          type: string
          format: date-time

    # User Discovery
    UserSearchResults:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/SearchUser'
        total_results:
          type: integer
        query:
          type: string

    SearchUser:
      type: object
      properties:
        user_id:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
        mutual_friends_count:
          type: integer
        relationship_status:
          type: string
          enum: [none, friend, blocked, request_sent, request_received]

    FriendSuggestions:
      type: object
      properties:
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/SuggestedUser'
        total_suggestions:
          type: integer

    SuggestedUser:
      type: object
      properties:
        user_id:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
        mutual_friends_count:
          type: integer
        suggestion_reason:
          type: string
          enum: [mutual_friends, similar_interests, location]

    # Relationship Status
    RelationshipStatus:
      type: object
      properties:
        relationship_type:
          type: string
          enum: [none, friend, blocked, request_sent, request_received]
        status:
          type: string
          enum: [pending, accepted, declined]
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        can_send_request:
          type: boolean

    # Social Statistics
    SocialStatistics:
      type: object
      properties:
        friends_count:
          type: integer
        pending_requests_count:
          type: integer
        sent_requests_count:
          type: integer
        blocked_users_count:
          type: integer
        mutual_friends_avg:
          type: number
          format: float
        social_activity_score:
          type: number
          format: float

    PaginationInfo:
      type: object
      required:
        - page
        - per_page
        - total_items
        - total_pages
        - has_next
        - has_prev
      properties:
        page:
          type: integer
          description: Current page number (1-indexed)
          example: 1
        per_page:
          type: integer
          description: Number of items per page
          example: 50
        total_items:
          type: integer
          description: Total number of items across all pages
          example: 100
        total_pages:
          type: integer
          description: Total number of pages
          example: 2
        has_next:
          type: boolean
          description: Whether there is a next page
          example: true
        has_prev:
          type: boolean
          description: Whether there is a previous page
          example: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT