# Game Engine & Session Management API (GOO-8 & GOO-9)
# This module contains game engine, sessions, challenges, teams, and tournaments

openapi: 3.1.0

info:
  title: GoodPlay Games & Sessions API
  version: 1.0.0
  description: Game engine, session management, and synchronization system

# API Paths
paths:
  # Game Management
  /api/games:
    get:
      tags:
        - Games
      summary: Get games list
      description: Retrieve list of available games with filtering and pagination
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by game category
        - name: search
          in: query
          schema:
            type: string
          description: Search games by name or description
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Games retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GamesList'

  /api/games/{game_id}:
    get:
      tags:
        - Games
      summary: Get game details
      description: Retrieve detailed information about a specific game
      security:
        - bearerAuth: []
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Game information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GameDetails'

  /api/games/categories:
    get:
      tags:
        - Games
      summary: Get game categories
      description: Retrieve list of all game categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Game categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GameCategories'

  # Game Sessions
  /api/games/sessions:
    post:
      tags:
        - Game Sessions
      summary: Start game session
      description: Start a new game session
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - game_id
              properties:
                game_id:
                  type: string
                session_config:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Game session started successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GameSession'

    get:
      tags:
        - Game Sessions
      summary: Get user sessions
      description: Retrieve user's game sessions with filtering
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, paused, completed, abandoned]
        - name: game_id
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: User sessions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SessionsList'

  /api/games/sessions/{session_id}:
    get:
      tags:
        - Game Sessions
      summary: Get session details
      description: Retrieve detailed information about a game session
      security:
        - bearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GameSession'

    delete:
      tags:
        - Game Sessions
      summary: End game session
      description: End an active game session
      security:
        - bearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                final_score:
                  type: integer
                end_reason:
                  type: string
                  enum: [completed, abandoned, timeout]
      responses:
        '200':
          description: Game session ended successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GameSession'

  /api/games/sessions/{session_id}/pause:
    post:
      tags:
        - Game Sessions
      summary: Pause game session
      description: Pause an active game session
      security:
        - bearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session paused successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/games/sessions/{session_id}/resume:
    post:
      tags:
        - Game Sessions
      summary: Resume game session
      description: Resume a paused game session
      security:
        - bearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session resumed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Enhanced Session Management (GOO-9)
  /api/games/sessions/{session_id}/sync:
    post:
      tags:
        - Session Sync
      summary: Synchronize session state
      description: Synchronize session state across devices with conflict resolution
      security:
        - bearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionSyncRequest'
      responses:
        '200':
          description: Session synchronized successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SessionSyncResponse'

  /api/games/sessions/{session_id}/device:
    get:
      tags:
        - Session Sync
      summary: Get session for device
      description: Get device-optimized session data
      security:
        - bearerAuth: []
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
        - name: device_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session provided for device successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DeviceSession'

  /api/games/sessions/active:
    get:
      tags:
        - Session Sync
      summary: Get active sessions
      description: Get all active/paused sessions for cross-device management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active sessions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ActiveSessionsList'

  /api/games/sessions/conflicts:
    get:
      tags:
        - Session Sync
      summary: Check sync conflicts
      description: Check for synchronization conflicts across devices
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sync conflicts check completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SyncConflictsResponse'

# Components
components:
  schemas:
    # Core response structure
    ApiResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
        message:
          type: string
          description: Constant message key for UI localization
          enum:
            # Game operations
            - GAME_NOT_FOUND
            - GAME_NOT_ACTIVE
            - GAME_RETRIEVAL_FAILED
            - GAMES_RETRIEVAL_FAILED
            - GAMES_SEARCH_FAILED
            - GAMES_STATS_RETRIEVAL_FAILED
            - GAME_CATEGORIES_RETRIEVAL_FAILED
            - GAME_INFO_RETRIEVAL_FAILED
            - GAME_CREATION_FAILED
            - GAME_DELETION_FAILED
            - GAME_HAS_NO_PLUGIN
            # Plugin operations
            - GAME_PLUGIN_NOT_FOUND
            - GAME_PLUGIN_INSTALLATION_FAILED
            - GAME_PLUGIN_UNINSTALLATION_FAILED
            - GAME_PLUGIN_VALIDATION_FAILED
            - PLUGIN_FILE_REQUIRED
            - PLUGIN_FILE_EMPTY
            - PLUGIN_NOT_FOUND_AFTER_INSTALL
            - PLUGIN_SESSION_START_FAILED
            - PLUGIN_STATE_UPDATE_REJECTED
            # Session operations
            - SESSION_NOT_FOUND
            - SESSION_NOT_ACTIVE
            - SESSION_ALREADY_ENDED
            - SESSION_NOT_PAUSED
            - SESSION_ACCESS_DENIED
            - SESSION_CREATION_FAILED
            - SESSION_RETRIEVAL_FAILED
            - SESSION_STATE_UPDATE_FAILED
            - SESSION_END_UPDATE_FAILED
            - SESSION_PAUSE_FAILED
            - SESSION_RESUME_FAILED
            - GAME_SESSION_START_FAILED
            - GAME_SESSION_END_FAILED
            - ACTIVE_SESSION_EXISTS
            - ACTIVE_SESSIONS_RETRIEVED_SUCCESS
            - ACTIVE_SESSIONS_RETRIEVAL_FAILED
            - USER_SESSIONS_RETRIEVAL_FAILED
            - USER_SESSION_STATS_RETRIEVAL_FAILED
            # Session sync operations
            - SESSION_SYNC_FAILED
            - SESSION_PROVISION_FAILED
            - SYNC_DATA_REQUIRED
            - SYNC_UPDATE_FAILED
            - SYNC_CONFLICT_RESOLUTION_FAILED
            - SYNC_CONFLICT_CHECK_FAILED
            - CONFLICT_RESOLUTION_DATA_REQUIRED
            - INVALID_RESOLUTION_STRATEGY
            # Move validation
            - MOVE_DATA_REQUIRED
            - MOVE_VALIDATION_FAILED
            - MOVE_RECORDING_FAILED
            - INVALID_MOVE
            # Rating operations
            - GAME_RATING_FAILED
            - GAME_RATING_UPDATE_FAILED
            - RATING_REQUIRED
            - INVALID_RATING_VALUE
            # Validation errors
            - SESSION_STATE_REQUIRED
            - INVALID_END_REASON
            - SEARCH_QUERY_REQUIRED
            - SEARCH_QUERY_TOO_SHORT
            - INVALID_PAGE_NUMBER
            - INVALID_LIMIT_VALUE
            - INVALID_SORT_FIELD
            - INVALID_QUERY_PARAMETERS
            # General errors
            - INTERNAL_SERVER_ERROR
            - NOT_FOUND
        data:
          description: Optional response data
          anyOf:
            - type: object
            - type: "null"

    # Game Management
    GamesList:
      type: object
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        categories:
          type: array
          items:
            type: string

    Game:
      type: object
      properties:
        game_id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        difficulty_level:
          type: string
          enum: [easy, medium, hard]
        estimated_duration:
          type: integer
          description: Estimated duration in minutes
        rating:
          type: number
          format: float
        thumbnail_url:
          type: string
        is_active:
          type: boolean
        player_count:
          type: integer

    GameDetails:
      allOf:
        - $ref: '#/components/schemas/Game'
        - type: object
          properties:
            rules:
              type: string
            instructions:
              type: string
            achievements:
              type: array
              items:
                $ref: '#/components/schemas/Achievement'
            statistics:
              $ref: '#/components/schemas/GameStatistics'

    GameCategories:
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              display_name:
                type: string
              game_count:
                type: integer

    # Game Sessions
    GameSession:
      type: object
      properties:
        session_id:
          type: string
        game_id:
          type: string
        user_id:
          type: string
        status:
          type: string
          enum: [active, paused, completed, abandoned]
        current_score:
          type: integer
        play_duration_ms:
          type: integer
          description: Total play duration in milliseconds
        created_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        ended_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
        paused_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
        resumed_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
        device_info:
          $ref: '#/components/schemas/DeviceInfo'
        sync_version:
          type: integer
        session_state:
          type: object
          additionalProperties: true

    DeviceInfo:
      type: object
      properties:
        device_id:
          type: string
        device_type:
          type: string
          enum: [mobile, tablet, desktop, web]
        platform:
          type: string
        app_version:
          type: string
        screen_resolution:
          type: string

    SessionsList:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/GameSession'
        statistics:
          $ref: '#/components/schemas/UserSessionStatistics'

    UserSessionStatistics:
      type: object
      properties:
        total_sessions:
          type: integer
        total_play_time_ms:
          type: integer
        average_session_duration_ms:
          type: integer
        favorite_game:
          type: string
        total_score:
          type: integer
        achievements_unlocked:
          type: integer

    # Session Synchronization (GOO-9)
    SessionSyncRequest:
      type: object
      required:
        - device_info
        - session_state
        - sync_version
      properties:
        device_info:
          $ref: '#/components/schemas/DeviceInfo'
        session_state:
          type: object
          additionalProperties: true
        sync_version:
          type: integer
        play_duration_ms:
          type: integer
        current_score:
          type: integer
        conflict_resolution_strategy:
          type: string
          enum: [server_wins, client_wins, merge, manual]
          default: server_wins

    SessionSyncResponse:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/GameSession'
        sync_result:
          type: string
          enum: [success, conflict_resolved, conflict_detected]
        conflict_info:
          anyOf:
            - $ref: '#/components/schemas/ConflictInfo'
            - type: "null"
        new_sync_version:
          type: integer

    DeviceSession:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/GameSession'
        device_optimizations:
          type: object
          properties:
            recommended_quality:
              type: string
              enum: [low, medium, high]
            touch_controls:
              type: boolean
            offline_mode:
              type: boolean

    ActiveSessionsList:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/GameSession'
        cross_device_sessions:
          type: array
          items:
            type: object
            properties:
              session_id:
                type: string
              devices:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceInfo'
              last_sync:
                type: string
                format: date-time

    SyncConflictsResponse:
      type: object
      properties:
        has_conflicts:
          type: boolean
        conflicts:
          type: array
          items:
            $ref: '#/components/schemas/ConflictInfo'
        total_conflicts:
          type: integer

    ConflictInfo:
      type: object
      properties:
        session_id:
          type: string
        conflict_type:
          type: string
          enum: [state_mismatch, version_conflict, device_conflict]
        description:
          type: string
        server_state:
          type: object
          additionalProperties: true
        client_state:
          type: object
          additionalProperties: true
        conflicting_devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceInfo'
        timestamp:
          type: string
          format: date-time

    Achievement:
      type: object
      properties:
        achievement_id:
          type: string
        name:
          type: string
        description:
          type: string
        icon_url:
          type: string
        rarity:
          type: string
          enum: [common, rare, epic, legendary]

    GameStatistics:
      type: object
      properties:
        total_players:
          type: integer
        average_rating:
          type: number
          format: float
        average_session_duration:
          type: integer
        total_sessions:
          type: integer

    GameMode:
      type: object
      properties:
        mode_name:
          type: string
        display_name:
          type: string
        description:
          type: string
        is_active:
          type: boolean
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        config:
          type: object
          additionalProperties: true

    Challenge:
      type: object
      properties:
        challenge_id:
          type: string
        challenge_type:
          type: string
          enum: ['1v1', 'NvN']
        game_id:
          type: string
        challenger_id:
          type: string
        challenged_id:
          type: string
        participants:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [pending, active, completed, cancelled]
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        game_config:
          type: object
          additionalProperties: true

    GlobalTeam:
      type: object
      properties:
        team_id:
          type: string
        name:
          type: string
        description:
          type: string
        color:
          type: string
        icon_url:
          type: string
        member_count:
          type: integer
        total_score:
          type: number
          format: float
        rank:
          type: integer
        is_active:
          type: boolean

    PaginationInfo:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        per_page:
          type: integer
          description: Items per page
        total_pages:
          type: integer
          description: Total number of pages
        has_next:
          type: boolean
          description: Whether there is a next page
        has_prev:
          type: boolean
          description: Whether there is a previous page

  # Game Modes Endpoints
  /api/modes/current:
    get:
      tags:
        - Game Modes
      summary: Get current available game modes
      description: Retrieve currently available game modes for users
      responses:
        '200':
          description: Current modes retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          available_modes:
                            type: array
                            items:
                              $ref: '#/components/schemas/GameMode'

  /api/modes/active:
    get:
      tags:
        - Game Modes
      summary: Get active modes (Admin only)
      description: Get all currently active modes - admin access required
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active modes retrieved successfully
        '401':
          description: Unauthorized access
        '403':
          description: Admin access required

  /api/modes/schedule:
    get:
      tags:
        - Game Modes
      summary: Get mode schedule information
      description: Get schedule information for game modes
      parameters:
        - name: mode_name
          in: query
          schema:
            type: string
          description: Specific mode name to get schedule for
      responses:
        '200':
          description: Mode schedule retrieved successfully

    post:
      tags:
        - Game Modes
      summary: Schedule mode activation (Admin only)
      description: Schedule a mode activation for future execution
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mode_name
                - scheduled_at
              properties:
                mode_name:
                  type: string
                scheduled_at:
                  type: string
                  format: date-time
                end_date:
                  type: string
                  format: date-time
                config_override:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Mode activation scheduled successfully
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized access
        '403':
          description: Admin access required

  /api/modes/{mode_name}/activate:
    post:
      tags:
        - Game Modes
      summary: Activate game mode (Admin only)
      description: Manually activate a specific game mode
      security:
        - bearerAuth: []
      parameters:
        - name: mode_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the mode to activate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date-time
                end_date:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Mode activated successfully
        '400':
          description: Invalid mode name or date format
        '401':
          description: Unauthorized access
        '403':
          description: Admin access required

  /api/modes/{mode_name}/deactivate:
    post:
      tags:
        - Game Modes
      summary: Deactivate game mode (Admin only)
      description: Manually deactivate a specific game mode
      security:
        - bearerAuth: []
      parameters:
        - name: mode_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the mode to deactivate
      responses:
        '200':
          description: Mode deactivated successfully
        '400':
          description: Invalid mode name
        '401':
          description: Unauthorized access
        '403':
          description: Admin access required

  /api/modes/statistics:
    get:
      tags:
        - Game Modes
      summary: Get mode statistics (Admin only)
      description: Get detailed statistics about game modes usage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Mode statistics retrieved successfully
        '401':
          description: Unauthorized access
        '403':
          description: Admin access required

  # Game Challenges Endpoints
  /api/challenges:
    post:
      tags:
        - Game Challenges
      summary: Create a new challenge
      description: Create a 1v1 or NvN challenge between players
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - challenge_type
                - game_id
              properties:
                challenge_type:
                  type: string
                  enum: ['1v1', 'NvN']
                game_id:
                  type: string
                challenged_id:
                  type: string
                  description: Required for 1v1 challenges
                max_participants:
                  type: integer
                  description: Required for NvN challenges
                  minimum: 3
                  maximum: 20
                min_participants:
                  type: integer
                  minimum: 2
                timeout_minutes:
                  type: integer
                  default: 60
                game_config:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Challenge created successfully
        '400':
          description: Invalid challenge data
        '401':
          description: Authentication required

  /api/challenges/public:
    get:
      tags:
        - Game Challenges
      summary: Get public challenges
      description: Retrieve available public challenges that players can join
      parameters:
        - name: game_id
          in: query
          schema:
            type: string
          description: Filter by specific game
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 50
      responses:
        '200':
          description: Public challenges retrieved successfully

  /api/challenges/{challenge_id}/join:
    post:
      tags:
        - Game Challenges
      summary: Join a challenge
      description: Join an existing public challenge
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully joined challenge
        '400':
          description: Cannot join challenge (full, ended, etc.)
        '401':
          description: Authentication required
        '404':
          description: Challenge not found

  /api/challenges/{challenge_id}/accept:
    post:
      tags:
        - Game Challenges
      summary: Accept a challenge
      description: Accept a direct challenge invitation
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Challenge accepted successfully
        '400':
          description: Cannot accept challenge
        '401':
          description: Authentication required
        '404':
          description: Challenge not found

  /api/challenges/{challenge_id}/decline:
    post:
      tags:
        - Game Challenges
      summary: Decline a challenge
      description: Decline a direct challenge invitation
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Challenge declined successfully
        '401':
          description: Authentication required
        '404':
          description: Challenge not found

  /api/challenges/my:
    get:
      tags:
        - Game Challenges
      summary: Get user's challenges
      description: Get challenges created by or involving the current user
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, active, completed, cancelled]
          description: Filter by challenge status
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        '200':
          description: User challenges retrieved successfully
        '401':
          description: Authentication required

  /api/challenges/matchmaking/find-opponent:
    post:
      tags:
        - Game Challenges
        - Matchmaking
      summary: Find an opponent for matchmaking
      description: Find a suitable opponent based on skill level and preferences
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - game_id
              properties:
                game_id:
                  type: string
                challenge_type:
                  type: string
                  enum: ['1v1', 'NvN']
                  default: '1v1'
                skill_range:
                  type: integer
                  default: 100
                  description: Acceptable skill level difference
      responses:
        '200':
          description: Opponent found successfully
        '404':
          description: No suitable opponent found
        '401':
          description: Authentication required

  /api/challenges/matchmaking/quick-match:
    post:
      tags:
        - Game Challenges
        - Matchmaking
      summary: Find a quick match
      description: Quickly find any available opponent for immediate play
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - game_id
              properties:
                game_id:
                  type: string
      responses:
        '200':
          description: Quick match found successfully
        '404':
          description: No matches available
        '401':
          description: Authentication required

  # Game Teams Endpoints
  /api/teams:
    get:
      tags:
        - Game Teams
      summary: Get all global teams
      description: Retrieve list of all available global teams
      parameters:
        - name: active_only
          in: query
          schema:
            type: boolean
            default: true
          description: Only return active teams
      responses:
        '200':
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          teams:
                            type: array
                            items:
                              $ref: '#/components/schemas/GlobalTeam'

  /api/teams/my-team:
    get:
      tags:
        - Game Teams
      summary: Get user's current team
      description: Get the team that the current user belongs to
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User team retrieved successfully
        '404':
          description: User not assigned to any team
        '401':
          description: Authentication required

  /api/teams/join:
    post:
      tags:
        - Game Teams
      summary: Join or auto-assign to team
      description: Join a specific team or get auto-assigned to a team
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: string
                  description: Specific team to join (optional - will auto-assign if not provided)
      responses:
        '200':
          description: Successfully joined team
        '400':
          description: Cannot join team (full, user already in team, etc.)
        '401':
          description: Authentication required

  /api/teams/leave:
    post:
      tags:
        - Game Teams
      summary: Leave current team
      description: Leave the user's current team
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully left team
        '400':
          description: User not in any team
        '401':
          description: Authentication required

  /api/teams/{team_id}/members:
    get:
      tags:
        - Game Teams
      summary: Get team members
      description: Get list of members in a specific team
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team members retrieved successfully
        '404':
          description: Team not found

  /api/teams/leaderboard:
    get:
      tags:
        - Game Teams
      summary: Get team leaderboard
      description: Get ranking of all teams based on their scores and contributions
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 50
      responses:
        '200':
          description: Team leaderboard retrieved successfully

  /api/teams/record-contribution:
    post:
      tags:
        - Game Teams
      summary: Record game contribution
      description: Record a game score contribution for the user's team
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - score
              properties:
                score:
                  type: number
                  format: float
                game_type:
                  type: string
                  default: 'individual'
      responses:
        '200':
          description: Contribution recorded successfully
        '400':
          description: Invalid score or user not in team
        '401':
          description: Authentication required