{
  "info": {
    "name": "GoodPlay Social API (GOO-7)",
    "description": "Social features and relationships API endpoints\n\nThis collection covers:\n- Friend request management\n- Friends list and relationships\n- User blocking/unblocking\n- User discovery and search\n- Social statistics\n\n## Environment Variables\n- `{{baseUrl}}` - API base URL\n- `{{token}}` - JWT access token\n- `{{targetUserId}}` - Target user ID for testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "social-api-collection"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "targetUserId",
      "value": "64f8b2c1234567890abcdef2",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Friend Requests",
      "item": [
        {
          "name": "Send Friend Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"target_user_id\": \"{{targetUserId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/social/friends/request",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "friends", "request"]
            }
          }
        },
        {
          "name": "Accept Friend Request",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/friends/request/{{requestId}}/accept",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "friends", "request", "{{requestId}}", "accept"]
            }
          }
        },
        {
          "name": "Decline Friend Request",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/friends/request/{{requestId}}/decline",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "friends", "request", "{{requestId}}", "decline"]
            }
          }
        },
        {
          "name": "Get Friend Requests",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/friends/requests?type=received",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "friends", "requests"],
              "query": [
                {
                  "key": "type",
                  "value": "received",
                  "description": "received, sent, or all"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Friends Management",
      "item": [
        {
          "name": "Get Friends List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/friends?page=1&per_page=50",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "friends"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "50"
                }
              ]
            }
          }
        },
        {
          "name": "Remove Friend",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/friends/{{targetUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "friends", "{{targetUserId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "User Blocking",
      "item": [
        {
          "name": "Block User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"target_user_id\": \"{{targetUserId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/social/block",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "block"]
            }
          }
        },
        {
          "name": "Unblock User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"target_user_id\": \"{{targetUserId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/social/unblock",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "unblock"]
            }
          }
        },
        {
          "name": "Get Blocked Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/blocked",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "blocked"]
            }
          }
        }
      ]
    },
    {
      "name": "User Discovery",
      "item": [
        {
          "name": "Search Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/search?query=john&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "john",
                  "description": "Search query (min 2 characters)"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Max results (1-50)"
                }
              ]
            }
          }
        },
        {
          "name": "Get Friend Suggestions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/suggestions?limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "suggestions"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Max suggestions (1-20)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Relationship Status",
      "item": [
        {
          "name": "Get Relationship Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/relationship/{{targetUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "relationship", "{{targetUserId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Social Statistics",
      "item": [
        {
          "name": "Get Social Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/social/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "social", "stats"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default target user ID if not exists",
          "if (!pm.environment.get('targetUserId')) {",
          "    pm.environment.set('targetUserId', '64f8b2c1234567890abcdef2');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.test('Status code is successful', function () {",
          "    pm.response.to.have.status.oneOf([200, 201, 204]);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const responseJson = pm.response.json();",
          "    pm.expect(responseJson).to.have.property('success');",
          "});",
          "",
          "// Store request ID for subsequent requests",
          "if (pm.response.json().success && pm.response.json().data) {",
          "    const data = pm.response.json().data;",
          "    if (data.request_id) {",
          "        pm.environment.set('requestId', data.request_id);",
          "    }",
          "}"
        ]
      }
    }
  ]
}